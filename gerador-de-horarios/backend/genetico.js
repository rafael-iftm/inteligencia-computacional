// Constantes Globais
const QTD_PONTOS_CORTE = 2; // N√∫mero de pontos de corte para o cruzamento gen√©tico
const QTD_INDIVIDUOS = 5;   // Tamanho da popula√ß√£o
const QTD_DISCIPLINAS_POR_PERIODO = 5;
const QTD_PROFESSORES = 10;
const QTD_HORARIOS_POR_DIA = 4;
const NOMES_PERIODOS = ['1¬∫', '2¬∫', '3¬∫', '4¬∫', '5¬∫'];
const NOMES_DIAS = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta'];

// Escolhe dois pais para cruzar
function selecao(populacaoOrdenada) {
  // Calcula o ponto que separa os melhores 50%
  const metade = Math.floor(populacaoOrdenada.length / 2);

  // Seleciona o primeiro pai entre os melhores (menor n√∫mero de conflitos)
  const pai1 = JSON.parse(JSON.stringify(
    populacaoOrdenada[Math.floor(Math.random() * metade)]
  ));

  // Seleciona o segundo pai de forma completamente aleat√≥ria
  const pai2 = JSON.parse(JSON.stringify(
    populacaoOrdenada[Math.floor(Math.random() * populacaoOrdenada.length)]
  ));

  // Log de apoio para depura√ß√£o
  console.log("\nüß¨ Sele√ß√£o de Pais");
  console.log("‚îú‚îÄ‚îÄ Pai 1 - Conflitos:", pai1._conflitos.length);
  console.log("‚îî‚îÄ‚îÄ Pai 2 - Conflitos:", pai2._conflitos.length);

  // Retorna os dois pais selecionados
  return [pai1, pai2];
}

// Mistura os genes dos pais (por per√≠odo)
function cruzamento(pai1, pai2) {
  // Extrai os nomes dos per√≠odos (excluindo propriedades como _conflitos)
  const periodos = Object.keys(pai1).filter(p => !p.startsWith('_'));

  const cortes = [];

  // Gera pontos de corte aleat√≥rios, distintos entre si
  while (cortes.length < QTD_PONTOS_CORTE) {
    const ponto = Math.floor(Math.random() * (periodos.length - 1)) + 1;
    if (!cortes.includes(ponto)) cortes.push(ponto);
  }

  // Ordena os pontos de corte em ordem crescente
  cortes.sort((a, b) => a - b);

  console.log("\nüîÄ Cruzamento");
  console.log("‚îú‚îÄ‚îÄ Pontos de corte:", cortes.join(', '));

  // Inicializa dois novos filhos com metadados vazios
  const filho1 = { _conflitos: [], _ocupacaoProfessores: {} };
  const filho2 = { _conflitos: [], _ocupacaoProfessores: {} };

  let alterna = false;

  // Para cada per√≠odo, decide de qual pai os filhos herdam a grade
  for (let i = 0; i < periodos.length; i++) {
    const periodo = periodos[i];

    // Alterna a origem dos dados baseado nos pontos de corte
    const source1 = alterna ? pai2[periodo] : pai1[periodo];
    const source2 = alterna ? pai1[periodo] : pai2[periodo];

    // Copia a grade daquele per√≠odo para cada filho
    filho1[periodo] = JSON.parse(JSON.stringify(source1));
    filho2[periodo] = JSON.parse(JSON.stringify(source2));

    // Se este √≠ndice √© um ponto de corte, inverta o pai de origem
    if (cortes.includes(i + 1)) {
      alterna = !alterna;
    }
  }

  console.log("‚îî‚îÄ‚îÄ Filhos gerados (pr√©-avalia√ß√£o)");
  return [filho1, filho2];
}

// Troca aleat√≥ria de duas c√©lulas da grade
function mutacao(individuo) {
  // Seleciona aleatoriamente um per√≠odo para aplicar muta√ß√£o
  const periodos = Object.keys(individuo).filter(p => !p.startsWith('_'));
  const periodoEscolhido = periodos[Math.floor(Math.random() * periodos.length)];

  const grade = individuo[periodoEscolhido];
  const dias = Object.keys(grade);

  // Sorteia dois dias e dois hor√°rios
  const dia1 = dias[Math.floor(Math.random() * dias.length)];
  const dia2 = dias[Math.floor(Math.random() * dias.length)];
  const horario1 = Math.floor(Math.random() * QTD_HORARIOS_POR_DIA);
  const horario2 = Math.floor(Math.random() * QTD_HORARIOS_POR_DIA);

  // Troca os conte√∫dos entre duas posi√ß√µes na grade
  const temp = grade[dia1][horario1];
  grade[dia1][horario1] = grade[dia2][horario2];
  grade[dia2][horario2] = temp;

  // Log para rastrear a muta√ß√£o aplicada
  console.log(`üîÑ Muta√ß√£o aplicada no per√≠odo ${periodoEscolhido} (${dia1}-${horario1} ‚áÑ ${dia2}-${horario2})`);
}

// Conta conflitos de aloca√ß√£o por professor
function avaliarIndividuo(individuo) {
  // Inicializa estruturas auxiliares
  individuo._ocupacaoProfessores = {};
  individuo._conflitos = [];

  // Itera pelos per√≠odos do indiv√≠duo
  const periodos = Object.keys(individuo).filter(p => !p.startsWith('_'));

  for (const periodo of periodos) {
    const grade = individuo[periodo];

    // Para cada dia da semana
    for (const dia of Object.keys(grade)) {
      // Para cada hor√°rio daquele dia
      grade[dia].forEach((celula, horario) => {
        if (!celula || !celula.professor) return;

        const chave = `${dia}-${horario}`; // Identificador √∫nico do hor√°rio
        const nome = celula.professor;

        // Inicializa ocupa√ß√£o do professor, se necess√°rio
        if (!individuo._ocupacaoProfessores[nome]) {
          individuo._ocupacaoProfessores[nome] = new Set();
        }

        // Se o professor j√° estava alocado neste hor√°rio, √© conflito
        if (individuo._ocupacaoProfessores[nome].has(chave)) {
          individuo._conflitos.push({
            professor: nome,
            dia,
            horario,
            periodo
          });
        } else {
          // Caso contr√°rio, marca como ocupado
          individuo._ocupacaoProfessores[nome].add(chave);
        }
      });
    }
  }

  // Feedback da avalia√ß√£o
  console.log(`‚úÖ Avalia√ß√£o conclu√≠da - Conflitos detectados: ${individuo._conflitos.length}`);
}

// Executa ciclo gen√©tico completo
function gerarNovaPopulacao(populacaoOrdenada) {
  const novaPopulacao = [];
  let gerados = 0;

  console.log("\nüöß Iniciando gera√ß√£o de nova popula√ß√£o...");

  // Gera nova popula√ß√£o com mesmo tamanho da anterior
  while (novaPopulacao.length < populacaoOrdenada.length) {
    // Etapa 1: sele√ß√£o de pais
    const [pai1, pai2] = selecao(populacaoOrdenada);

    // Etapa 2: cruzamento
    const [filho1, filho2] = cruzamento(pai1, pai2);

    // Etapa 3: muta√ß√£o (modifica√ß√£o aleat√≥ria)
    mutacao(filho1);
    mutacao(filho2);

    // Etapa 4: avalia√ß√£o da qualidade dos filhos
    avaliarIndividuo(filho1);
    avaliarIndividuo(filho2);

    // Etapa 5: inclus√£o dos filhos na nova popula√ß√£o
    novaPopulacao.push(filho1);
    gerados++;

    // Adiciona o segundo filho, se houver espa√ßo
    if (novaPopulacao.length < populacaoOrdenada.length) {
      novaPopulacao.push(filho2);
      gerados++;
    }
  }

  console.log(`\n‚úÖ Nova popula√ß√£o gerada com ${gerados} indiv√≠duos.`);
  return novaPopulacao;
}

module.exports = {
  selecao,
  cruzamento,
  gerarNovaPopulacao,
  mutacao,
  avaliarIndividuo,
};
