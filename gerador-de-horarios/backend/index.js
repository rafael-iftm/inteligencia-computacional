// Importa o Express e o CORS
const express = require('express');
const cors = require('cors');
const { gerarNovaPopulacao } = require('./genetico');

const app = express();
const PORT = 3001;

// üî¢ CONSTANTES GLOBAIS
const QTD_PERIODOS = 5;
const QTD_DIAS_POR_SEMANA = 5;
const QTD_HORARIOS_POR_DIA = 4;
const QTD_DISCIPLINAS_POR_PERIODO = 5;
const QTD_PROFESSORES = 10;
const QTD_DISCIPLINAS = QTD_PERIODOS * QTD_DISCIPLINAS_POR_PERIODO;
const QTD_AULAS_POR_DISCIPLINA = 4;
const QTD_INDIVIDUOS = 5;

const NOMES_PERIODOS = ['1¬∫', '2¬∫', '3¬∫', '4¬∫', '5¬∫'];
const NOMES_DIAS = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta'];
const HORARIOS = Array.from({ length: QTD_HORARIOS_POR_DIA }, (_, i) => i + 1);

// Middleware
app.use(cors());
app.use(express.json());

// Gera disciplinas distribu√≠das por per√≠odo
const disciplinasPorPeriodo = Object.fromEntries(
  NOMES_PERIODOS.map((periodo, idx) => {
    const inicio = idx * QTD_DISCIPLINAS_POR_PERIODO + 1;
    const disciplinas = Array.from({ length: QTD_DISCIPLINAS_POR_PERIODO }, (_, i) => ({
      id: `D${inicio + i}`,
      nome: `Disciplina ${inicio + i}`,
    }));
    return [periodo, disciplinas];
  })
);

// Gera professores
const professores = Array.from({ length: QTD_PROFESSORES }, (_, i) => ({
  id: `P${i + 1}`,
  nome: `Professor ${i + 1}`,
}));

// Fun√ß√£o que gera a popula√ß√£o inicial de indiv√≠duos (grades hor√°rias)
function popInicial(qtdIndividuos = QTD_INDIVIDUOS) {
  const populacao = []; // Lista onde ser√£o armazenados todos os indiv√≠duos

  // Gera 'qtdIndividuos' indiv√≠duos
  for (let i = 0; i < qtdIndividuos; i++) {
    const individuo = {}; // Objeto que representar√° a grade hor√°ria de todos os per√≠odos
    const disciplinaProfessorMap = {}; // Mapeia cada disciplina para um professor fixo
    individuo._ocupacaoProfessores = {}; // Guarda as aloca√ß√µes j√° feitas por professor
    individuo._conflitos = []; // Lista de conflitos (professor com sobreposi√ß√£o de hor√°rio)

    // Para cada per√≠odo (ex: '1¬∫', '2¬∫', ..., '5¬∫')
    NOMES_PERIODOS.forEach(periodo => {
      const grade = {}; // Grade de hor√°rios desse per√≠odo
      const disciplinas = disciplinasPorPeriodo[periodo]; // Lista de 5 disciplinas do per√≠odo

      // Embaralha os professores dispon√≠veis para aleatoriedade na atribui√ß√£o
      const professoresDisponiveis = [...professores].sort(() => Math.random() - 0.5);

      const todasCelulas = []; // Lista com todas as posi√ß√µes poss√≠veis na grade (dia x hor√°rio)

      // Inicializa a grade para os 5 dias da semana, com 4 hor√°rios por dia
      NOMES_DIAS.forEach(dia => {
        grade[dia] = Array(QTD_HORARIOS_POR_DIA).fill(null); // Ex: [null, null, null, null]
        for (let h = 0; h < QTD_HORARIOS_POR_DIA; h++) {
          todasCelulas.push({ dia, horario: h }); // Salva todas as combina√ß√µes poss√≠veis
        }
      });

      // Embaralha a lista de c√©lulas para sortear posi√ß√µes aleat√≥rias
      todasCelulas.sort(() => Math.random() - 0.5);

      // Para cada disciplina do per√≠odo, alocar 4 hor√°rios distintos
      for (const disciplina of disciplinas) {
        // Define o professor da disciplina (fixo por disciplina)
        let professor = disciplinaProfessorMap[disciplina.id] || professoresDisponiveis.pop();
        disciplinaProfessorMap[disciplina.id] = professor;

        let alocados = 0;

        // Enquanto n√£o alocar os 4 hor√°rios da disciplina
        while (alocados < QTD_AULAS_POR_DISCIPLINA && todasCelulas.length > 0) {
          const celula = todasCelulas.pop(); // Pega uma c√©lula aleat√≥ria dispon√≠vel
          const chave = `${celula.dia}-${celula.horario}`; // Ex: "Segunda-2"

          // Inicializa o registro de ocupa√ß√£o do professor, se necess√°rio
          if (!individuo._ocupacaoProfessores[professor.nome]) {
            individuo._ocupacaoProfessores[professor.nome] = new Set();
          }

          // Verifica se o professor j√° est√° ocupado nesse hor√°rio
          const estaOcupado = individuo._ocupacaoProfessores[professor.nome].has(chave);

          // Aloca a disciplina na grade
          grade[celula.dia][celula.horario] = {
            disciplina: disciplina.nome,
            professor: professor.nome,
          };
          alocados++;

          // Se o professor estiver ocupado, registra um conflito
          if (estaOcupado) {
            individuo._conflitos.push({
              professor: professor.nome,
              dia: celula.dia,
              horario: celula.horario,
              periodo,
            });
          } else {
            // Marca a ocupa√ß√£o desse hor√°rio para o professor
            individuo._ocupacaoProfessores[professor.nome].add(chave);
          }
        }
      }

      // Adiciona a grade hor√°ria finalizada ao indiv√≠duo
      individuo[periodo] = grade;
    });

    // Adiciona o indiv√≠duo completo √† popula√ß√£o
    populacao.push(individuo);
  }

  // Retorna a popula√ß√£o gerada
  return populacao;
}


// Rota da API
app.get('/api/populacao', (req, res) => {
  console.log('\nüì• [GET] /api/populacao - Gerando popula√ß√£o inicial aleat√≥ria...');
  const populacao = popInicial();
  console.log(`‚úÖ Popula√ß√£o inicial gerada com ${populacao.length} indiv√≠duos.`);
  res.json({ populacao });
});

// Rota que retorna nova gera√ß√£o cruzada
app.get('/api/gerar', (req, res) => {
  console.log('\nüì• [GET] /api/gerar - Gerando nova gera√ß√£o por cruzamento gen√©tico...');
  const populacaoOriginal = popInicial();
  const populacaoOrdenada = populacaoOriginal.sort(
    (a, b) => (a._conflitos?.length || 0) - (b._conflitos?.length || 0)
  );
  const novaGeracao = gerarNovaPopulacao(populacaoOrdenada);
  console.log('‚úÖ Gera√ß√£o conclu√≠da e enviada ao frontend.\n');
  res.json({ populacao: novaGeracao });
});

// Inicia o servidor
app.listen(PORT, () => {
  console.log(`üöÄ Backend rodando em http://localhost:${PORT}`);
});
